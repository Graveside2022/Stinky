<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="format-detection" content="telephone=no">
    <meta http-equiv="cache-control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="0">
    <title>Kismet Operations Center</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        /* CSS Custom Properties for Theme Support */
        :root {
            /* Default Blue Cyber Theme */
            --bg-primary: #030610;
            --bg-secondary: rgba(12, 22, 48, 0.65);
            --bg-tertiary: rgba(12, 22, 48, 0.85);
            --bg-panel: rgba(12, 22, 48, 0.95);
            
            --text-primary: #d0d8f0;
            --text-secondary: rgba(0, 220, 255, 0.8);
            --text-muted: #737373;
            
            --border-primary: rgba(0, 190, 215, 0.35);
            --border-secondary: rgba(0, 190, 215, 0.25);
            
            --accent-primary: #00d2ff;    /* Cyan accent */
            --accent-success: #44ff44;    /* Green accent */
            --accent-error: #ff4444;      /* Red accent */
            --accent-warning: #f59e0b;    /* Amber accent */
            
            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.3);
            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.2);
            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);
            
            /* Original glow effects */
            --glow-primary: 0 0 20px rgba(0, 220, 255, 0.5);
            --glow-success: 0 0 20px rgba(68, 255, 68, 0.5);
            --glow-error: 0 0 20px rgba(255, 68, 68, 0.5);
        }
        
        /* Cursor.directory Dark Theme */
        [data-theme="dark"] {
            --bg-primary: #0f172a;
            --bg-secondary: rgba(30, 41, 59, 0.65);
            --bg-tertiary: rgba(51, 65, 85, 0.85);
            --bg-panel: rgba(30, 41, 59, 0.95);
            
            --text-primary: #f8fafc;
            --text-secondary: #cbd5e1;
            --text-muted: #94a3b8;
            
            --border-primary: rgba(71, 85, 105, 0.35);
            --border-secondary: rgba(56, 189, 248, 0.25);
            
            --accent-primary: #38bdf8;
            --accent-success: #10b981;
            --accent-error: #ef4444;
            --accent-warning: #f59e0b;
            
            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.4);
            --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.3);
            --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.2);
            
            --glow-primary: 0 0 20px rgba(56, 189, 248, 0.6);
            --glow-success: 0 0 20px rgba(16, 185, 129, 0.5);
            --glow-error: 0 0 20px rgba(239, 68, 68, 0.5);
        }
        
        /* Phase 3.1: Foundation Changes - CSS Reset and Box Sizing */
        *, *::before, *::after {
            box-sizing: border-box;
        }
        
        html {
            height: 100%;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-text-size-adjust: 100%;
            touch-action: manipulation;
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow: hidden; /* Prevent body itself from scrolling */
            box-sizing: border-box;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        /* Phase 3.2: Layout Transformation - Mobile body overflow fix */
        @media (max-width: 768px) {
            body {
                overflow: auto;
                height: auto;
                min-height: 100vh;
            }
        }

        body::before {
            content: "";
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background:
                linear-gradient(45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%),
                linear-gradient(-45deg, rgba(14, 165, 233, 0.02) 25%, transparent 25%, transparent 75%, rgba(14, 165, 233, 0.02) 75%);
            background-size: 70px 70px; /* Slightly larger grid */
            z-index: -2; /* Ensure it's behind potential new layers */
            opacity: 0.4; /* Subtler grid */
            animation: background-pan 80s linear infinite; /* Slower pan */
        }

        /* Optional: Add a subtle static starfield or noise layer */
        body::after {
            content: "";
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle fill="%23203050" cx="10" cy="10" r="0.3"/><circle fill="%23203050" cx="30" cy="30" r="0.2"/><circle fill="%23203050" cx="50" cy="50" r="0.4"/><circle fill="%23203050" cx="70" cy="70" r="0.1"/><circle fill="%23203050" cx="90" cy="90" r="0.3"/><circle fill="%23203050" cx="10" cy="90" r="0.2"/><circle fill="%23203050" cx="90" cy="10" r="0.4"/><circle fill="%23203050" cx="50" cy="10" r="0.1"/><circle fill="%23203050" cx="10" cy="50" r="0.3"/><circle fill="%23203050" cx="30" cy="70" r="0.2"/><circle fill="%23203050" cx="70" cy="30" r="0.3"/></svg>');
            background-size: 100px 100px;
            opacity: 0.08;
            z-index: -1;
        }


        @keyframes background-pan {
            0% { background-position: 0% 0%; }
            100% { background-position: 1200px 1200px; } /* Ensure it pans a large distance */
        }

        .top-banner {
            width: 100%;
            background: var(--bg-panel);
            backdrop-filter: blur(12px);
            border-bottom: 2px solid var(--accent-primary);
            box-shadow: var(--glow-primary);
            padding: 15px 25px;
            text-align: center;
            box-sizing: border-box;
            flex-shrink: 0;
            z-index: 10;
            position: relative;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .top-banner::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 200%;
            height: 100%;
            background: linear-gradient(90deg,
                transparent 0%,
                rgba(124, 58, 237, 0.1) 25%,
                rgba(124, 58, 237, 0.2) 50%,
                rgba(124, 58, 237, 0.1) 75%,
                transparent 100%);
            animation: banner-scan 4s linear infinite;
        }

        .top-banner::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);
            animation: radial-pulse 4s ease-in-out infinite;
        }

        @keyframes radial-pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        .top-banner h1 {
            color: var(--text-primary);
            text-transform: uppercase;
            letter-spacing: 12px;
            font-size: 2.4em;
            font-weight: 800;
            margin: 0;
            text-shadow: var(--glow-primary);
            position: relative;
            font-family: 'Inter', sans-serif;
            background: linear-gradient(90deg, 
                var(--text-primary) 0%,
                var(--accent-primary) 25%,
                var(--text-primary) 50%,
                var(--accent-primary) 75%,
                var(--text-primary) 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            background-size: 200% auto;
            animation: shine 3s linear infinite;
        }
        
        /* Phase 3.3: Top Banner Mobile Optimization */
        @media (max-width: 768px) {
            .top-banner {
                padding: 10px 15px;
            }
            
            .top-banner h1 {
                font-size: clamp(1.2rem, 4vw, 2rem);
                letter-spacing: 4px;
            }
            
            .top-banner::before,
            .top-banner::after {
                animation: none; /* Disable complex animations on mobile */
            }
        }

        @keyframes shine {
            to {
                background-position: 200% center;
            }
        }

        .minimized-tabs {
            background-color: var(--bg-panel);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(0, 190, 215, 0.35);
            box-shadow: 0 2px 10px rgba(0, 150, 180, 0.1);
            padding: 2px 20px;
            display: flex;
            gap: 10px;
            position: fixed;
            top: 60px;
            left: 0;
            right: 0;
            z-index: 999;
            height: 15px;
            overflow-x: auto;
            white-space: nowrap;
        }
        
        /* Phase 3.2: Fixed Positioning Removal for Mobile */
        @media (max-width: 768px) {
            .minimized-tabs {
                position: relative;
                width: 100%;
                top: auto;
            }
        }

        .minimized-tab {
            background-color: rgba(0, 190, 215, 0.15);
            border: 1px solid rgba(0, 190, 215, 0.35);
            padding: 0 10px;
            border-radius: 3px;
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 0.8em;
            color: rgba(124, 58, 237, 0.8);
            cursor: pointer;
            height: 15px;
            line-height: 15px;
        }

        .minimized-tab:hover {
            background-color: rgba(0, 190, 215, 0.25);
        }

        .restore-button {
            background: none;
            border: none;
            color: rgba(124, 58, 237, 0.8);
            cursor: pointer;
            padding: 0;
            font-size: 0.8em;
            line-height: 1;
        }

        .restore-button:hover {
            color: rgba(124, 58, 237, 1);
        }

        .main-content-area {
            display: grid;
            grid-template-columns: 300px 1fr 350px; /* Three columns: left-stack, middle, right-stack */
            gap: 20px;
            width: 100%;
            height: 100%;
            padding: 20px;
            margin: 0;
            box-sizing: border-box;
            overflow-y: auto;
        }
        
        /* Phase 3.2: Grid System Transformation - Mobile First */
        @media (max-width: 600px) {
            .main-content-area {
                grid-template-columns: 1fr; /* Mobile: single column */
                grid-template-rows: auto;
                height: auto;
                overflow: visible;
                gap: 8px;
            }
            
            .side-stack,
            .middle-long-box,
            .right-stack {
                width: 100%;
            }
        }
        
        @media (min-width: 601px) and (max-width: 1023px) {
            .main-content-area {
                grid-template-columns: 1fr; /* Tablet: single column for better readability */
                grid-template-rows: auto;
                height: auto;
                overflow: visible;
                gap: 12px;
                padding: 12px;
            }
            
            .side-stack,
            .middle-long-box,
            .right-stack {
                width: 100%;
            }
        }

        .container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            width: 100vw;
            background: linear-gradient(135deg, #0a192f 0%, #020c1b 100%);
            color: var(--accent-primary);
            font-family: 'Courier New', monospace;
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            overflow: hidden;
            padding-bottom: 20px; /* Reduced padding for smaller footer */
        }

        .header {
            background-color: var(--bg-panel);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(0, 190, 215, 0.35);
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        /* Phase 3.2: Priority 2 - Convert Fixed Heights to Responsive */
        @media (max-width: 768px) {
            .header {
                height: auto;
                min-height: 60px;
                padding: 0.75rem;
            }
        }

        .grid-item {
            background-color: var(--bg-secondary);
            backdrop-filter: blur(12px);
            border: 1px solid var(--border-primary);
            box-shadow: var(--shadow-md);
            border-radius: 0;
            padding: 0;
            position: relative;
            transition: all 0.3s ease;
        }
        
        /* Phase 3.2: Grid Item Responsive Heights */
        @media (max-width: 768px) {
            .grid-item {
                height: auto;
                min-height: 200px;
                max-height: 90vh;
            }
        }

        .grid-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 2px solid transparent;
            pointer-events: none;
        }

        .grid-item:hover::before {
            border-color: rgba(0, 190, 215, 0.35);
        }

        .grid-item .resize-handle {
            position: absolute;
            background: rgba(0, 190, 215, 0.35);
            pointer-events: all;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .grid-item:hover .resize-handle {
            opacity: 1;
        }
        
        /* Phase 3.4: Mobile-Specific Controls - Hide resize handles */
        @media (max-width: 768px) {
            .resize-handle {
                display: none !important;
            }
        }

        .grid-item .resize-handle.top {
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            cursor: ns-resize;
        }

        .grid-item .resize-handle.bottom {
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            cursor: ns-resize;
        }

        .grid-item .resize-handle.left {
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            cursor: ew-resize;
        }

        .grid-item .resize-handle.right {
            right: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            cursor: ew-resize;
        }

        .grid-item .resize-handle.top-left {
            top: 0;
            left: 0;
            width: 6px;
            height: 6px;
            cursor: nw-resize;
        }

        .grid-item .resize-handle.top-right {
            top: 0;
            right: 0;
            width: 6px;
            height: 6px;
            cursor: ne-resize;
        }

        .grid-item .resize-handle.bottom-left {
            bottom: 0;
            left: 0;
            width: 6px;
            height: 6px;
            cursor: sw-resize;
        }

        .grid-item .resize-handle.bottom-right {
            bottom: 0;
            right: 0;
            width: 6px;
            height: 6px;
            cursor: se-resize;
        }

        .grid-item * {
            resize: none;
            cursor: default !important;
        }
        
        /* Override cursor for control buttons */
        .grid-item .control-button-small {
            cursor: pointer !important;
        }
        
        /* Enable move cursor on desktop for draggable headers */
        @media (min-width: 769px) {
            .grid-item .box-header {
                cursor: move !important;
            }
            
            /* Remove position override to allow dragging */
        }

        .grid-item.expanded {
            display: none;
        }

        .grid-item.expanded.middle {
            display: none;
        }

        .grid-item.minimized {
            display: none;
        }

        .grid-placeholder {
            display: none;
        }

        .grid-item.dragging {
            display: none;
        }

        .box-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            height: 100%;
            overflow: hidden;
            padding: 4px;
            width: 100%;
        }

        .box-header {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-primary);
            border-bottom: 2px solid var(--accent-primary);
            padding: 5px 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            height: 20px;
            box-shadow: var(--shadow-sm);
            backdrop-filter: blur(8px);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .box-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 200%;
            height: 100%;
            background: linear-gradient(90deg,
                transparent 0%,
                rgba(124, 58, 237, 0.1) 25%,
                rgba(124, 58, 237, 0.2) 50%,
                rgba(124, 58, 237, 0.1) 75%,
                transparent 100%);
            animation: header-scan 3s linear infinite;
        }

        .box-header::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 50%, rgba(124, 58, 237, 0.1) 0%, transparent 50%);
            animation: radial-pulse 4s ease-in-out infinite;
        }

        .box-header h2 {
            color: #fff;
            margin: 0;
            font-size: 1em;
            font-weight: 700;
            text-align: center;
            width: 100%;
            text-transform: uppercase;
            letter-spacing: 2px;
            text-shadow: 
                0 0 10px rgba(124, 58, 237, 0.8),
                0 0 20px rgba(124, 58, 237, 0.5),
                0 0 30px rgba(124, 58, 237, 0.3);
            font-family: 'Inter', sans-serif;
            position: relative;
            background: linear-gradient(90deg, 
                #fff 0%,
                #00d2ff 25%,
                #fff 50%,
                #00d2ff 75%,
                #fff 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            background-size: 200% auto;
            animation: shine 3s linear infinite;
        }

        .box-header h2::before,
        .box-header h2::after {
            content: '';
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 8px;
            height: 8px;
            background: rgba(124, 58, 237, 0.9);
            border-radius: 50%;
            box-shadow: 
                0 0 10px rgba(124, 58, 237, 0.8),
                0 0 20px rgba(124, 58, 237, 0.6),
                0 0 30px rgba(124, 58, 237, 0.4);
            animation: dot-pulse 2s ease-in-out infinite;
            will-change: transform, opacity;
            z-index: 1;
        }

        .box-header h2::before {
            left: -20px;
            animation-delay: 0s;
        }

        .box-header h2::after {
            right: -20px;
            animation-delay: 1s;
        }

        @keyframes dot-pulse {
            0% { 
                transform: translateY(-50%) scale(1); 
                opacity: 0.8;
                box-shadow: 
                    0 0 10px rgba(124, 58, 237, 0.8),
                    0 0 20px rgba(124, 58, 237, 0.6),
                    0 0 30px rgba(124, 58, 237, 0.4);
            }
            50% { 
                transform: translateY(-50%) scale(1.2); 
                opacity: 1;
                box-shadow: 
                    0 0 15px rgba(124, 58, 237, 0.9),
                    0 0 30px rgba(124, 58, 237, 0.7),
                    0 0 45px rgba(124, 58, 237, 0.5);
            }
            100% { 
                transform: translateY(-50%) scale(1); 
                opacity: 0.8;
                box-shadow: 
                    0 0 10px rgba(124, 58, 237, 0.8),
                    0 0 20px rgba(124, 58, 237, 0.6),
                    0 0 30px rgba(124, 58, 237, 0.4);
            }
        }

        .box-controls {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            gap: 5px;
            align-items: center;
            z-index: 100;
        }

        .control-button-small {
            background: none;
            border: none;
            color: var(--accent-primary);
            cursor: pointer !important;
            font-size: 1.2em;
            padding: 0 2px;
            transition: all 0.3s ease;
            z-index: 101;
            text-shadow: var(--glow-primary);
            pointer-events: auto !important;
            position: relative;
        }

        .control-button-small:hover {
            color: var(--text-primary);
            text-shadow: var(--glow-primary);
            transform: translateY(-2px);
        }

        .grid-item h2 {
            color: #a0e0ff;
            border-bottom: none;
            padding-bottom: 0;
            margin: 0;
            letter-spacing: 1.5px;
            font-weight: 500;
            font-size: 1.1em;
            text-shadow: 0 0 5px rgba(0, 200, 220, 0.3);
        }

        .minimize-button {
            background: none;
            border: none;
            color: var(--accent-primary);
            cursor: pointer;
            font-size: 1.2em;
            padding: 0 5px;
            transition: transform 0.3s ease;
        }

        .minimize-button:hover {
            color: #00f2ff;
            text-shadow: 0 0 8px rgba(124, 58, 237, 0.6);
        }

        .minimize-button.minimized {
            transform: rotate(180deg);
        }

        .grid-item.minimized .grid-item-content {
            display: none;
        }

        .grid-item-content {
            flex-grow: 1;
            overflow-y: auto;
            padding-right: 5px;
            scrollbar-width: thin;
            scrollbar-color: rgba(124, 58, 237, 0.5) rgba(3, 6, 16, 0.5);
        }
        
        /* Special styling for instructions box content */
        #instructions .grid-item-content {
            overflow-y: visible; /* Don't scroll the content */
            padding: 15px;
        }
        
        /* Custom scrollbar for Webkit browsers */
        .grid-item-content::-webkit-scrollbar {
            width: 6px;
        }
        .grid-item-content::-webkit-scrollbar-track {
            background: rgba(3, 6, 16, 0.3);
            border-radius: 3px;
        }
        .grid-item-content::-webkit-scrollbar-thumb {
            background-color: rgba(124, 58, 237, 0.4);
            border-radius: 3px;
            border: 1px solid rgba(124, 58, 237, 0.2);
        }
        .grid-item-content::-webkit-scrollbar-thumb:hover {
            background-color: rgba(124, 58, 237, 0.6);
        }


        .middle-long-box {
            /* Inherits .grid-item styles, full height from grid row */
        }

        .side-stack {
            display: grid;
            grid-template-rows: 1fr 1fr; /* Two equal rows for stacked boxes */
            gap: 10px; /* Increased gap to match main grid */
            height: 100%; 
        }


        /* Right stack styles */
        .right-stack {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        /* Cesium globe specific styles */
        #cesium-globe {
            height: 500px;
        }

        #cesium-container {
            background: #000;
            border-radius: 4px;
            overflow: hidden;
        }

        /* Cesium widget overrides */
        .cesium-viewer .cesium-widget-credits {
            display: none !important;
        }

        .cesium-viewer {
            font-family: 'Inter', sans-serif;
        }

        .cesium-controls button {
            width: 30px;
            height: 30px;
            font-size: 18px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Position info styling */
        #position-info {
            pointer-events: none;
            max-width: 200px;
        }

        /* Three-column responsive adjustments */
        @media (max-width: 1400px) {
            .main-content-area {
                grid-template-columns: 280px 1fr 320px;
            }
        }

        @media (max-width: 1200px) {
            .main-content-area {
                grid-template-columns: 1fr;
            }
            
            .side-stack,
            .right-stack {
                width: 100%;
            }
            
            .side-stack {
                order: 1;
            }
            
            .middle-long-box {
                order: 2;
            }
            
            .right-stack {
                order: 3;
            }
        }

        #system-message {
            font-size: 1.1em;
            color: #00e2ff;
            transition: opacity 0.5s ease-in-out, text-shadow 0.3s ease;
            font-weight: 400;
            text-align: center;
            flex-grow: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px;
            text-shadow: 0 0 6px rgba(124, 58, 237, 0.6);
            animation: pulse-glow 2s infinite alternate;
        }

        @keyframes pulse-glow {
            from { text-shadow: 0 0 6px rgba(124, 58, 237, 0.6); opacity: 0.8; }
            to { text-shadow: 0 0 12px rgba(124, 58, 237, 0.9), 0 0 20px rgba(124, 58, 237, 0.4); opacity: 1; }
        }

        .status-found {
            animation: none !important;
            text-shadow: 0 0 8px rgba(124, 58, 237, 0.8);
            color: #00ff00;
        }

        .data-feed .feed-item {
            background-color: rgba(0, 50, 80, 0.55); /* Adjusted for glassmorphism */
            border-left: 3px solid #00bcd4; /* Slightly thicker, different cyan */
            padding: 7px 10px; /* More padding */
            margin-bottom: 6px; /* Slightly more margin */
            border-radius: 0 4px 4px 0; /* More rounded */
            font-size: 0.85em; /* Slightly larger */
            color: #c0e8ff; /* Softer blue */
            text-align: left;
            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease;
        }
        
        /* Phase 3.3: Data Feeds - Improve scrolling and readability */
        .device-item-wrapper,
        #wifi-feed {
            max-height: 300px;
            -webkit-overflow-scrolling: touch;
        }
        
        @media (max-width: 768px) {
            .feed-item {
                font-size: 0.875rem;
                padding: 0.5rem;
            }
        }
        
        .data-feed .feed-item:hover {
            background-color: rgba(0, 70, 100, 0.75);
            border-left-color: #00f2ff; /* Brighter on hover */
            transform: translateX(3px);
        }

        .feed-item-blink {
            animation: blink-animation 1.5s infinite ease-in-out; /* Smoother blink */
        }

        @keyframes blink-animation {
            0%, 100% { border-left-color: #ffdd57; color: #ffdd57; box-shadow: 0 0 5px rgba(255,221,87,0.3); }
            50% { border-left-color: #00bcd4; color: #c0e8ff; box-shadow: none; }
        }

        /* Tab Styles */
        .tab-nav {
            display: flex;
            flex-direction: column; 
            margin-bottom: 10px;
            flex-shrink: 0; /* Prevent tab nav from shrinking if content is too large */
        }
        
        /* Phase 3.3: Navigation Tabs - Mobile scrollable */
        @media (max-width: 600px) {
            .tabs {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
            
            .tab {
                flex-shrink: 0;
                min-width: 100px;
            }
        }

        .tab-button {
            background-color: rgba(0, 50, 80, 0.55);
            border: none; 
            outline: none;
            border-left: 3px solid #00bcd4;
            padding: 8px 12px; /* Slightly more padding for clickable area */
            margin-bottom: 6px; 
            border-radius: 0 4px 4px 0;
            font-size: 0.9em; /* Slightly larger than feed items for clarity */
            color: #c0e8ff;
            text-align: left;
            cursor: pointer;
            transition: background-color 0.3s ease, border-left-color 0.3s ease, transform 0.2s ease, color 0.3s ease;
            width: 100%; 
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            font-weight: 400;
        }

        .tab-button:hover {
            background-color: rgba(0, 70, 100, 0.75);
            border-left-color: #00f2ff;
            transform: translateX(3px);
            color: #e0f8ff;
        }

        .tab-button.active-tab {
            background-color: rgba(0, 80, 120, 0.85); 
            border-left-color: #00f2ff; 
            color: #ffffff; 
            font-weight: 500; /* Bolder active tab */
        }

        .tab-content {
            display: none;
            padding: 10px;
            background-color: rgba(0, 50, 80, 0.55);
            border-radius: 4px;
            margin-top: 10px;
        }

        .tab-content.active {
            display: block;
        }

        .tab-pane {
            display: none; 
            padding: 5px 2px; /* Minimal padding for content area */
            animation: fadeIn 0.4s ease-in-out;
            /* The parent .grid-item-content already handles overflow-y: auto */
        }
        
        .tab-pane p {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        .tab-pane p strong {
            color: #a0e0ff; /* Match h2 color */
            font-weight: 500;
        }
        .tab-pane code {
            background-color: rgba(0, 30, 50, 0.7);
            padding: 2px 5px;
            border-radius: 3px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 0.9em;
            color: #86cfff;
            display: block; /* Make code blocks take full width */
            margin-top: 3px;
            white-space: pre-wrap; /* Allow wrapping for long commands */
            border: 1px solid rgba(0, 190, 215, 0.2);
        }


        .tab-pane.active-pane {
            display: block; 
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(8px); }
            to { opacity: 1; transform: translateY(0); }
        }
        /* End Tab Styles */

        .footer {
            background-color: var(--bg-panel);
            backdrop-filter: blur(12px);
            border-top: 1px solid rgba(0, 190, 215, 0.35);
            box-shadow: 0 -2px 10px rgba(0, 150, 180, 0.1);
            padding: 5px 20px;
            text-align: center;
            color: rgba(124, 58, 237, 0.8);
            font-size: 0.8em;
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Courier New', monospace;
        }
        
        /* Phase 3.2: Footer Mobile Positioning */
        @media (max-width: 768px) {
            .footer {
                position: relative;
                bottom: auto;
            }
        }

        .footer-content {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            gap: 15px;
        }

        .footer-text {
            color: rgba(124, 58, 237, 0.8);
            font-size: 0.9em;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .footer-separator {
            color: rgba(0, 190, 215, 0.5);
            font-size: 0.8em;
        }

        .footer-symbol {
            color: rgba(124, 58, 237, 0.9);
            font-size: 0.9em;
            margin: 0 2px;
        }
        
        /* ENHANCED MOBILE OPTIMIZATIONS */
        
        /* iOS Specific Fixes */
        @supports (-webkit-touch-callout: none) {
            /* iOS Safari specific styles */
            body {
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -webkit-tap-highlight-color: transparent;
            }
            
            /* Fix for iOS Safari bounce scrolling */
            .main-content-area {
                -webkit-overflow-scrolling: touch;
            }
            
            /* Prevent iOS zoom on input focus */
            input, select, textarea, button {
                font-size: 16px !important;
            }
            
            /* Safe area insets for iPhone X and newer */
            .top-banner {
                padding-top: max(15px, env(safe-area-inset-top));
            }
            
            .footer {
                padding-bottom: max(5px, env(safe-area-inset-bottom));
            }
            
            .page-container {
                padding-left: env(safe-area-inset-left);
                padding-right: env(safe-area-inset-right);
            }
        }
        
        /* iPhone-specific media queries */
        /* iPhone SE, 6/7/8 */
        @media only screen 
        and (min-device-width: 375px) 
        and (max-device-width: 667px) 
        and (-webkit-min-device-pixel-ratio: 2) {
            .top-banner h1 {
                font-size: 1.3rem;
                letter-spacing: 3px;
            }
            
            .control-button {
                padding: 12px 16px;
                font-size: 0.875rem;
            }
            
            .box-header h2 {
                font-size: 0.85rem;
            }
        }
        
        /* iPhone 6/7/8 Plus */
        @media only screen 
        and (min-device-width: 414px) 
        and (max-device-width: 736px) 
        and (-webkit-min-device-pixel-ratio: 3) {
            .top-banner h1 {
                font-size: 1.4rem;
            }
        }
        
        /* iPhone X, XS, 11 Pro */
        @media only screen 
        and (min-device-width: 375px) 
        and (max-device-width: 812px) 
        and (-webkit-min-device-pixel-ratio: 3) {
            .page-container {
                top: calc(100px + env(safe-area-inset-top)) !important;
                bottom: calc(60px + env(safe-area-inset-bottom)) !important;
            }
        }
        
        /* iPhone 12/13/14 Mini */
        @media only screen 
        and (min-device-width: 360px) 
        and (max-device-width: 780px) 
        and (-webkit-min-device-pixel-ratio: 3) {
            .control-button {
                padding: 11px 14px;
                font-size: 0.85rem;
            }
        }
        
        /* iPhone 12/13/14 Pro Max */
        @media only screen 
        and (min-device-width: 428px) 
        and (max-device-width: 926px) 
        and (-webkit-min-device-pixel-ratio: 3) {
            .top-banner h1 {
                font-size: 1.5rem;
            }
        }
        
        /* Mobile Layout Adjustments */
        @media (max-width: 768px) {
            /* Prevent horizontal scroll */
            html, body {
                overflow-x: hidden;
                width: 100%;
            }
            
            /* Page container adjustment */
            .page-container {
                position: static !important;
                top: auto !important;
                bottom: auto !important;
                min-height: 100vh;
                padding-bottom: 60px; /* Space for footer */
                width: 100%;
                max-width: 100vw;
            }
            
            /* Main content area improvements */
            .main-content-area {
                flex: none !important;
                overflow-y: visible !important;
                position: static !important;
                padding: 4px;
            }
            
            /* Grid items mobile layout */
            .side-stack {
                display: block;
                margin-bottom: 8px;
            }
            
            .side-stack .grid-item {
                margin-bottom: 8px;
                min-height: 150px;
            }
            
            /* Adjust header sizes for mobile */
            .box-header h2 {
                font-size: 0.9em;
                letter-spacing: 1px;
            }
            
            .box-header h2::before,
            .box-header h2::after {
                display: none; /* Hide decorative dots on mobile */
            }
            
            /* Button adjustments */
            .control-button {
                padding: 12px 16px;
                font-size: 0.9em;
                min-height: 44px; /* iOS touch target size */
                -webkit-appearance: none;
                border-radius: 8px;
                touch-action: manipulation; /* Prevent double-tap zoom */
                position: relative;
                overflow: hidden;
            }
            
            /* iOS button active state */
            .control-button:active {
                transform: scale(0.98);
                opacity: 0.9;
            }
            
            .button-group {
                grid-template-columns: 1fr !important;
                gap: 8px !important;
            }
            
            /* Service status indicators */
            .service-status {
                margin-top: 10px !important;
                padding-top: 10px !important;
            }
            
            /* GPS info text size */
            #gps-info {
                font-size: 0.85em;
            }
            
            /* Feed items */
            #devices-list,
            #wifi-feed {
                max-height: 150px !important;
                -webkit-overflow-scrolling: touch;
                overflow-y: auto;
                overscroll-behavior: contain;
            }
            
            /* Better scrolling for grid items on iOS */
            .grid-item-content {
                -webkit-overflow-scrolling: touch;
                overscroll-behavior: contain;
            }
            
            /* Footer adjustments */
            .footer-text {
                font-size: 0.75em;
                flex-wrap: wrap;
                justify-content: center;
            }
            
            .footer-separator {
                display: none;
            }
            
            /* Mobile adjustments */
            
            .resizable-frame .resize-handle {
                display: none !important;
            }
            
            /* Hide dragging on mobile */
            .box-header {
                cursor: default !important;
            }
            
            /* Tab navigation improvements */
            .tab-nav {
                flex-direction: row;
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                gap: 5px;
            }
            
            .tab-button {
                flex: 0 0 auto;
                min-width: 80px;
                padding: 6px 10px;
                margin-bottom: 0;
            }
            
            /* System message */
            #system-message {
                font-size: 0.9em;
                padding: 8px;
            }
            
            /* Notification positioning */
            .notification {
                top: 10px;
                left: 10px;
                right: 10px;
                transform: none;
                font-size: 0.9em;
                padding: 10px 20px;
            }
            
            /* Status message positioning */
            .status-message {
                top: 10px;
                right: 10px;
                left: 10px;
                font-size: 0.85em;
                padding: 10px 15px;
            }
        }
        
        /* Small mobile devices */
        @media (max-width: 480px) {
            .top-banner h1 {
                font-size: 1rem;
                letter-spacing: 2px;
            }
            
            .box-header {
                padding: 5px 10px;
            }
            
            .control-button {
                font-size: 0.85em;
                padding: 8px 12px;
            }
            
            #gps-info {
                font-size: 0.8em;
            }
        }
        
        /* iPhone landscape mode */
        @media only screen 
        and (max-device-height: 428px) 
        and (orientation: landscape) {
            .top-banner {
                padding: 5px 15px;
                padding-left: max(15px, env(safe-area-inset-left));
                padding-right: max(15px, env(safe-area-inset-right));
            }
            
            .top-banner h1 {
                font-size: 1.1rem;
            }
            
            .main-content-area {
                grid-template-columns: repeat(2, 1fr);
                gap: 4px;
                padding: 4px;
            }
            
            .grid-item {
                min-height: 120px;
            }
            
            
            .minimized-tabs {
                display: none; /* Hide in landscape to save space */
            }
        }
        
        /* Touch-friendly hover states */
        @media (hover: none) and (pointer: coarse) {
            .control-button:active {
                background: linear-gradient(90deg, #222 0%, #00d2ff 100%);
                transform: translateY(-1px);
            }
            
            .tab-button:active {
                background-color: rgba(0, 70, 100, 0.75);
                border-left-color: #00f2ff;
            }
            
            .feed-item:active {
                background-color: rgba(0, 70, 100, 0.75);
                border-left-color: #00f2ff;
            }
        }

        .control-button {
            background: linear-gradient(90deg, #00d2ff 0%, #222 100%);
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 1em;
            font-family: inherit;
            font-weight: 500;
            cursor: pointer;
            box-shadow: 0 4px 16px rgba(0, 210, 255, 0.15);
            transition: all 0.3s ease;
            text-align: center;
            text-decoration: none;
        }
        
        /* Phase 3.2: Touch Target Enhancement for Mobile */
        @media (max-width: 768px) {
            .control-button, .control-button-small {
                min-width: 48px;
                min-height: 48px;
                padding: 12px;
            }
        }
        
        /* Phase 3.3: Control Buttons - Stack vertically on mobile */
        @media (max-width: 480px) {
            .control-buttons {
                flex-direction: column;
                gap: 8px;
            }
            
            .control-buttons button {
                width: 100%;
            }
        }

        .control-button:hover {
            background: linear-gradient(90deg, #222 0%, #00d2ff 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 32px rgba(0, 210, 255, 0.25);
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--bg-panel);
            border: 1px solid rgba(124, 58, 237, 0.4);
            color: var(--accent-primary);
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1.1em;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
            box-shadow: 0 0 20px rgba(124, 58, 237, 0.2);
            backdrop-filter: blur(8px);
        }

        .notification.show {
            opacity: 1;
        }

        .notification.success {
            border-color: rgba(68, 255, 68, 0.4);
            color: #44ff44;
            box-shadow: 0 0 20px rgba(68, 255, 68, 0.2);
        }

        .notification.error {
            border-color: rgba(255, 68, 68, 0.4);
            color: #ff4444;
            box-shadow: 0 0 20px rgba(255, 68, 68, 0.2);
        }

        /* Initial layout positions */
        #instructions {
            position: absolute;
            top: 8px;
            left: 8px;
            width: calc(4 * (100vw / 12) - 16px);
            height: auto; /* Let it size to content initially */
            min-height: 180px; /* Minimum height to show header and tabs */
        }

        #wifi-data-feed {
            position: absolute;
            top: 8px;
            left: calc(4 * (100vw / 12) + 8px);
            width: calc(4 * (100vw / 12) - 16px);
            height: calc(100vh - 140px - 8px);
        }

        #start-menu {
            position: absolute;
            top: auto; /* Will be set dynamically */
            left: 8px;
            width: calc(4 * (100vw / 12) - 16px);
            height: auto; /* Will be set dynamically */
            min-height: 300px; /* Increased to ensure all content fits */
            overflow: visible; /* Allow glow effects to show */
        }
        
        /* Ensure start menu content doesn't clip glow effects */
        #start-menu .grid-item-content {
            overflow: visible;
            padding-bottom: 25px; /* Extra padding for glow */
            padding-left: 10px;
            padding-right: 10px;
        }
        
        /* Status dot styles with glow effect */
        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff4444;
            transition: all 0.3s ease;
        }
        
        .status-dot.active {
            background: #44ff44;
            box-shadow: 0 0 15px #44ff44, 0 0 25px #44ff44;
        }
        
        /* Ensure status indicators have room for glow */
        .status-indicator {
            position: relative;
            overflow: visible;
            margin: 5px 0; /* Add margin for glow space */
        }

        #system-status {
            position: absolute;
            top: auto; /* Will be set dynamically */
            left: 8px;
            width: calc(4 * (100vw / 12) - 16px);
            height: auto; /* Will be set dynamically */
            min-height: 280px; /* Balanced to accommodate GPS fields */
            overflow: visible; /* Allow resize handles to show properly */
        }
        
        /* Ensure system status content has proper overflow */
        #system-status .grid-item-content {
            overflow-y: auto;
            max-height: calc(100% - 40px); /* Account for header */
        }
        
        /* Phase 3.2: Responsive layout positions */
        @media (max-width: 768px) {
            #instructions, #wifi-data-feed, #start-menu, #system-status {
                position: relative;
                top: auto;
                left: auto;
                right: auto;
                width: 100%;
                height: auto;
                min-height: 200px;
                margin-bottom: 8px;
            }
        }

        /* Update the HTML structure for all boxes */
        #instructions h2, #wifi-data-feed h2, #start-menu h2, #system-status h2 {
            display: inline-block;
            width: 100%;
            text-align: center;
        }

        .status-message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: #fff;
            font-size: 14px;
            z-index: 1000;
            opacity: 1;
            transition: opacity 0.3s ease-in-out;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .status-message.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .status-success {
            background-color: rgba(0, 200, 100, 0.9);
            border: 1px solid rgba(0, 200, 100, 0.3);
        }

        .status-error {
            background-color: rgba(255, 68, 68, 0.9);
            border: 1px solid rgba(255, 68, 68, 0.3);
        }

        .status-warning {
            background-color: rgba(255, 170, 0, 0.9);
            border: 1px solid rgba(255, 170, 0, 0.3);
        }

        .feed-item {
            background-color: var(--bg-panel);
            border: 1px solid rgba(0, 190, 215, 0.35);
            padding: 10px;
            margin-bottom: 8px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0, 150, 180, 0.1);
        }

        .device-info {
            color: var(--accent-primary);
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            line-height: 1.4;
        }

        .device-info strong {
            color: #fff;
            font-weight: 500;
        }

        .error-message {
            color: #ff4444;
            background-color: rgba(255, 68, 68, 0.1);
            border: 1px solid rgba(255, 68, 68, 0.3);
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        /* Resizable iframe styles */
        .resizable-frame {
            transition: height 0.3s ease, width 0.3s ease, bottom 0.3s ease, left 0.3s ease, right 0.3s ease;
        }

        .resizable-frame .resize-handle {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 10px; /* Increased from 5px for easier grabbing */
            background: linear-gradient(90deg, transparent 20%, rgba(124, 58, 237, 0.4) 50%, transparent 80%);
            cursor: ns-resize;
            z-index: 1001;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .resizable-frame:hover .resize-handle {
            opacity: 1;
        }

        .resizable-frame .resize-handle:hover {
            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.6) 50%, transparent 90%);
        }

        .resizable-frame .resize-handle:active {
            background: linear-gradient(90deg, transparent 10%, rgba(124, 58, 237, 0.8) 50%, transparent 90%);
        }
        
        
        /* Spinner animation for offline screen */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }


        /* Minimized box style */
        .grid-item.minimized {
            display: none !important;
        }

        /* Minimized tabs container */
        #minimized-tabs {
            position: fixed;
            top: 60px;
            left: 0;
            right: 0;
            z-index: 90;
            height: 40px;
            background: var(--bg-panel);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(0, 210, 255, 0.35);
            padding: 0.25rem 0.5rem;
            display: flex;
            gap: 0.5rem;
            overflow-x: auto;
        }

        .minimized-tab {
            background: rgba(0, 210, 255, 0.2);
            border: 1px solid rgba(0, 210, 255, 0.5);
            border-radius: 4px;
            padding: 0.25rem 0.75rem;
            color: var(--accent-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
        }

        .minimized-tab:hover {
            background: rgba(0, 210, 255, 0.3);
            border-color: #00d2ff;
        }

        .restore-button {
            background: none;
            border: none;
            color: #10b981;
            cursor: pointer;
            font-size: 1rem;
            padding: 0;
            margin-left: 0.5rem;
        }

        .restore-button:hover {
            color: #44ff44;
        }
        
        /* Theme Toggle Button */
        .theme-toggle {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            z-index: 1000;
            background: var(--bg-secondary);
            border: 1px solid var(--border-primary);
            border-radius: 50%;
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }
        
        .theme-toggle:hover {
            transform: scale(1.1);
            border-color: var(--accent-primary);
            box-shadow: var(--glow-primary);
        }
        
        .theme-toggle svg {
            width: 24px;
            height: 24px;
            fill: var(--accent-primary);
            transition: all 0.3s ease;
        }
        
        /* Mobile adjustments for theme toggle */
        @media (max-width: 768px) {
            .theme-toggle {
                bottom: 1rem;
                right: 1rem;
                width: 44px;
                height: 44px;
            }
        }
    </style>
    <!-- Cesium CSS and JS -->
    <link href="https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
    <script src="https://cesium.com/downloads/cesiumjs/releases/1.119/Build/Cesium/Cesium.js"></script>
</head>
<body data-theme="dark">
    <div id="notification" class="notification"></div>
    <div id="status-message" class="status-message hidden"></div>
    <header class="top-banner">
        <h1>Kismet Operations Center</h1>
    </header>
    <div id="minimized-tabs" class="minimized-tabs"></div>


    <div class="page-container" style="position: fixed; top: 100px; left: 0; right: 0; bottom: 30px; display: flex; flex-direction: column;">
        <main class="main-content-area" style="flex: 1; overflow-y: auto; position: relative;">
        <div class="side-stack left-stack">
            <div id="instructions" class="grid-item">
                <div class="box-header">
                <h2>Setup Instructions</h2>
                    <div class="box-controls">
                        <button class="control-button-small" data-action="minimize">▼</button>
                    </div>
                </div>
                <div class="grid-item-content">
                    <div class="tab-nav">
                        <a href="wigle.html" class="tab-button active-tab" target="_blank">Wigle</a>
                        <a href="atak.html" class="tab-button" target="_blank">ATAK</a>
                        <a href="kismet2.html" class="tab-button" target="_blank">Kismet</a>
                    </div>
                </div>
            </div>
            <div id="start-menu" class="grid-item">
                <div class="box-header">
                <h2>Start Menu</h2>
                    <div class="box-controls">
                        <button class="control-button-small" data-action="minimize">▼</button>
                    </div>
                </div>
                <div class="grid-item-content">
                    <div class="button-group" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; margin-bottom: 15px;">
                        <button class="control-button" data-action="startKismet">Start Kismet</button>
                        <button class="control-button" data-action="stopKismet">Stop Kismet</button>
                        <a href="#" onclick="window.open('http://' + window.location.hostname + ':2501', '_blank'); return false;" class="control-button">Open Kismet Web UI</a>
                        <a href="#" onclick="window.open('http://' + window.location.hostname + ':8000', '_blank'); return false;" class="control-button">Open WigletoTak</a>
                        <a href="#" onclick="window.open('http://' + window.location.hostname + ':8073', '_blank'); return false;" class="control-button">Open WebRX UI</a>
                        <a href="#" onclick="window.open('http://' + window.location.hostname + ':8092', '_blank'); return false;" class="control-button">Open HackRF Sweep</a>
                    </div>
                    <div class="service-status" style="margin-top: 15px; padding: 15px 0; border-top: 1px solid rgba(0, 200, 220, 0.3); overflow: visible;">
                        <div class="status-indicator" style="display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;">
                            <div class="status-dot" id="kismet-status"></div>
                            <span style="color: #d0d8f0; font-size: 0.9em;">Kismet</span>
                        </div>
                        <div class="status-indicator" style="display: flex; align-items: center; gap: 10px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 6px; margin-bottom: 10px;">
                            <div class="status-dot" id="wigle-status"></div>
                            <span style="color: #d0d8f0; font-size: 0.9em;">WigletoTak</span>
                        </div>
                    </div>
                </div>
            </div>
            <div id="system-status" class="grid-item">
                <div class="box-header">
                <h2>System Status</h2>
                    <div class="box-controls">
                        <button class="control-button-small" data-action="minimize">▼</button>
                    </div>
                </div>
                <div class="grid-item-content">
                    <div id="system-message" style="margin-bottom: 1rem;">Loading system status...</div>
                    <div id="gps-info" style="color: #d0d8f0; line-height: 1.6;">
                        <p><strong style="color: #00d2ff;">IP Address:</strong> <span id="ip-address">Loading...</span></p>
                        <p><strong style="color: #00d2ff;">GPS Status:</strong> <span id="gps-status">Loading...</span></p>
                        <p><strong style="color: #00d2ff;">Latitude:</strong> <span id="gps-lat">--</span></p>
                        <p><strong style="color: #00d2ff;">Longitude:</strong> <span id="gps-lon">--</span></p>
                        <p><strong style="color: #00d2ff;">Altitude:</strong> <span id="gps-alt">--</span></p>
                        <p><strong style="color: #00d2ff;">MGRS Grid:</strong> <span id="gps-mgrs">--</span></p>
                        <p><strong style="color: #00d2ff;">GPS Time:</strong> <span id="gps-time">--</span></p>
                    </div>
                </div>
            </div>
        </div>

        <div id="wifi-data-feed" class="grid-item middle-long-box">
            <div class="box-header">
                <h2>Kismet Data Feed</h2>
                <div class="box-controls">
                    <button class="control-button-small" data-action="minimize">▼</button>
                </div>
            </div>
            <div class="grid-item-content" style="padding: 10px; overflow-y: auto;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px; padding: 10px; background: rgba(0, 0, 0, 0.2); border-radius: 4px;">
                    <div style="text-align: center;">
                        <div style="color: #00d2ff; font-size: 0.9em;">Devices</div>
                        <div id="devices-count" style="color: #fff; font-size: 1.2em; font-weight: bold;">0</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="color: #00d2ff; font-size: 0.9em;">Networks</div>
                        <div id="networks-count" style="color: #fff; font-size: 1.2em; font-weight: bold;">0</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="color: #00d2ff; font-size: 0.9em;">Last Update</div>
                        <div id="last-update" style="color: #fff; font-size: 0.8em;">--</div>
                    </div>
                </div>
                <div style="margin-bottom: 15px;">
                    <h3 style="color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;">Recent Devices</h3>
                    <div id="devices-list" style="max-height: 200px; overflow-y: auto;">
                        <div class="feed-item">No devices detected</div>
                    </div>
                </div>
                <div>
                    <h3 style="color: #00d2ff; margin: 0 0 10px 0; font-size: 1em;">Activity Feed</h3>
                    <div id="wifi-feed" style="max-height: 200px; overflow-y: auto;">
                        <div class="feed-item">Waiting for activity...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Right Stack: Cesium Globe -->
        <div class="side-stack right-stack">
            <div id="cesium-globe" class="grid-item">
                <div class="box-header">
                    <h2>Location Globe</h2>
                    <div class="box-controls">
                        <button class="control-button-small" data-action="minimize">▼</button>
                    </div>
                </div>
                <div class="grid-item-content" style="position: relative; padding: 0;">
                    <div id="cesium-container" style="width: 100%; height: 400px;"></div>
                    <div class="cesium-controls" style="position: absolute; top: 10px; right: 10px; z-index: 100;">
                        <button id="zoom-in" class="control-button-small" style="margin-bottom: 5px;">+</button>
                        <button id="zoom-out" class="control-button-small">-</button>
                    </div>
                    <div id="position-info" style="position: absolute; bottom: 10px; left: 10px; background: rgba(0, 0, 0, 0.7); padding: 5px 10px; border-radius: 4px; color: #00d2ff; font-size: 0.8em; z-index: 100;">
                        <span id="globe-position">Waiting for GPS...</span>
                    </div>
                </div>
            </div>
        </div>
    </main>
    </div> <!-- End of page-container -->

    <!-- MGRS Library -->
    <script src="/mgrs.min.js"></script>
    <script>
    // Kismet iframe functionality has been removed

    


    </script>

    <footer class="footer">
        <div class="footer-content">
            <div class="footer-text">
                <span class="footer-symbol">⚡</span>
                Property of
                <span class="footer-separator">|</span>
                SSG Malone, Darren
                <span class="footer-separator">|</span>
                SPC Peirson, Christian
                <span class="footer-symbol">⚡</span>
            </div>
        </div>
    </footer>

    <script>
        const messages = [
            "Calibrating Chroniton Emitters...",
            "Quantum Field Sync: 99.97%",
            "Reality Matrix Stabilized.",
            "Interface Online. Welcome, Commander."
        ];
        let messageIndex = 0;
        const planetaryMessageElement = document.getElementById('planetary-message');
        const systemMessageElement = document.getElementById('system-message');
        const dynamicTextElements = document.querySelectorAll('.dynamic-text');

        function updateSystemMessage() {
            if (planetaryMessageElement) {
                planetaryMessageElement.style.opacity = 0;
                setTimeout(() => {
                    planetaryMessageElement.textContent = messages[messageIndex];
                    planetaryMessageElement.style.opacity = 1;
                    messageIndex = (messageIndex + 1) % messages.length;
                }, 500);
            }
        }

        // Initial call and interval
        if (messages.length > 0) {
            updateSystemMessage();
            setInterval(updateSystemMessage, 7000); // Change message every 7 seconds
        }

        // Convert lat/lon to MGRS using the mgrs.js library
        function latLonToMGRS(lat, lon) {
            if (!lat || !lon || lat === 'N/A' || lon === 'N/A') return '--';
            
            try {
                const latNum = parseFloat(lat);
                const lonNum = parseFloat(lon);
                
                // Use mgrs.forward to convert lat/lon to MGRS
                // The second parameter (4) specifies 8-digit precision (4 digits each for easting/northing)
                const mgrsString = mgrs.forward([lonNum, latNum], 4);
                
                // Format the MGRS string with spaces for readability
                // Example: 18TWL8456123456 becomes 18T WL 8456 3456
                const formatted = mgrsString.replace(/^(\d+[A-Z])([A-Z]{2})(\d{4})(\d{4})$/, '$1 $2 $3 $4');
                
                return formatted;
            } catch (e) {
                console.error('MGRS conversion error:', e);
                return '--';
            }
        }

        // Update system status
        function updateSystemStatus() {
            fetch('/info', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    const gps = data.gps;
                    document.getElementById('ip-address').textContent = data.ip;
                    document.getElementById('gps-status').textContent = gps.status;
                    document.getElementById('gps-lat').textContent = gps.lat ?? 'N/A';
                    document.getElementById('gps-lon').textContent = gps.lon ?? 'N/A';
                    document.getElementById('gps-alt').textContent = gps.alt ?? 'N/A';
                    
                    // Calculate and display MGRS
                    const mgrs = latLonToMGRS(gps.lat, gps.lon);
                    document.getElementById('gps-mgrs').textContent = mgrs;
                    
                    document.getElementById('gps-time').textContent = gps.time ?? 'N/A';
                })
                .catch(error => {
                    document.getElementById('system-message').textContent = 'Error loading system status';
                });
        }

        // Cesium Globe Initialization
        let cesiumViewer = null;
        let positionEntity = null;
        let lastGpsUpdate = null;

        function initializeCesiumGlobe() {
            console.log('Initializing Cesium Globe...');
            try {
                // Check if Cesium is loaded
                if (typeof Cesium === 'undefined') {
                    console.error('Cesium library not loaded!');
                    return;
                }
                console.log('Cesium library is available');
                
                // Set Cesium Ion default access token (this is a free token)
                Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYWE1OWUxNy1mMWZiLTQzYjYtYTQ0OS1kMWFjYmFkNjc5YzAiLCJpZCI6NTc3MzMsImlhdCI6MTYyNzg0NTE4Mn0.XcKpgANiY19MC4bdFUXMVEBToBmqS8kuYpUlxJHYZxk';
                
                // Initialize Cesium viewer with minimal, compatible settings
                console.log('Creating Cesium viewer...');
                cesiumViewer = new Cesium.Viewer('cesium-container', {
                    terrainProvider: new Cesium.EllipsoidTerrainProvider(),
                    imageryProvider: new Cesium.UrlTemplateImageryProvider({
                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                        credit: 'Tiles © Esri',
                        maximumLevel: 19
                    }),
                    baseLayerPicker: false,
                    geocoder: false,
                    homeButton: false,
                    sceneModePicker: false,
                    navigationHelpButton: false,
                    animation: false,
                    timeline: false,
                    fullscreenButton: false,
                    vrButton: false,
                    selectionIndicator: false,
                    infoBox: false,
                    scene3DOnly: true
                });

                // Try multiple imagery providers until one works
                const imageryProviders = [
                    {
                        name: 'Local Offline Tiles',
                        provider: () => new Cesium.UrlTemplateImageryProvider({
                            url: '/offline-tiles/{z}/{x}/{y}.png',
                            credit: 'Offline Natural Earth Data',
                            maximumLevel: 5,
                            minimumLevel: 0
                        })
                    },
                    {
                        name: 'Esri World Imagery',
                        provider: () => new Cesium.UrlTemplateImageryProvider({
                            url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                            credit: 'Tiles © Esri',
                            maximumLevel: 19
                        })
                    },
                    {
                        name: 'CartoDB Positron',
                        provider: () => new Cesium.UrlTemplateImageryProvider({
                            url: 'https://a.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png',
                            credit: 'Map tiles by CartoDB, under CC BY 3.0',
                            maximumLevel: 18
                        })
                    },
                    {
                        name: 'Stamen Terrain',
                        provider: () => new Cesium.UrlTemplateImageryProvider({
                            url: 'https://stamen-tiles.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',
                            credit: 'Map tiles by Stamen Design, under CC BY 3.0',
                            maximumLevel: 18
                        })
                    },
                    {
                        name: 'OpenTopoMap',
                        provider: () => new Cesium.UrlTemplateImageryProvider({
                            url: 'https://a.tile.opentopomap.org/{z}/{x}/{y}.png',
                            credit: 'Map data © OpenStreetMap contributors, SRTM | Map style © OpenTopoMap',
                            maximumLevel: 17
                        })
                    }
                ];

                // Remove existing imagery and try providers
                cesiumViewer.imageryLayers.removeAll();
                let imageryAdded = false;

                for (const providerInfo of imageryProviders) {
                    try {
                        const provider = providerInfo.provider();
                        cesiumViewer.imageryLayers.addImageryProvider(provider);
                        console.log(`Successfully loaded imagery: ${providerInfo.name}`);
                        imageryAdded = true;
                        break;
                    } catch (error) {
                        console.warn(`Failed to load ${providerInfo.name}:`, error);
                    }
                }

                if (!imageryAdded) {
                    console.error('All imagery providers failed, using Cesium default');
                }

                // Set initial view - use compatible lighting settings
                try {
                    cesiumViewer.scene.globe.enableLighting = true;
                } catch (e) {
                    console.log('Lighting not supported in this Cesium version');
                }
                cesiumViewer.scene.globe.depthTestAgainstTerrain = false; // Disable for better performance
                
                // Add a more visible position marker
                positionEntity = cesiumViewer.entities.add({
                    position: Cesium.Cartesian3.fromDegrees(0, 0),
                    point: {
                        pixelSize: 15,
                        color: Cesium.Color.CYAN,
                        outlineColor: Cesium.Color.WHITE,
                        outlineWidth: 3,
                        heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
                        disableDepthTestDistance: Number.POSITIVE_INFINITY
                    },
                    label: {
                        text: 'System Location',
                        font: '14pt Inter',
                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
                        pixelOffset: new Cesium.Cartesian2(0, -20),
                        fillColor: Cesium.Color.CYAN,
                        outlineColor: Cesium.Color.BLACK,
                        outlineWidth: 2,
                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                        disableDepthTestDistance: Number.POSITIVE_INFINITY
                    }
                });

                // Set initial camera view
                cesiumViewer.camera.setView({
                    destination: Cesium.Cartesian3.fromDegrees(0, 0, 10000000),
                    orientation: {
                        heading: 0.0,
                        pitch: -Cesium.Math.PI_OVER_TWO,
                        roll: 0.0
                    }
                });

                // Zoom controls
                document.getElementById('zoom-in').addEventListener('click', () => {
                    const camera = cesiumViewer.camera;
                    camera.zoomIn(camera.positionCartographic.height * 0.5);
                });

                document.getElementById('zoom-out').addEventListener('click', () => {
                    const camera = cesiumViewer.camera;
                    camera.zoomOut(camera.positionCartographic.height * 0.5);
                });

                console.log('Cesium globe initialized successfully');
                document.getElementById('globe-position').textContent = 'Globe Ready - Waiting for GPS...';
            } catch (error) {
                console.error('Failed to initialize Cesium globe:', error);
                document.getElementById('cesium-container').innerHTML = 
                    `<div style="color: #ff4444; padding: 20px; text-align: center;">
                        Failed to load globe<br>
                        <small>${error.message}</small>
                    </div>`;
            }
        }

        // Update globe position from GPS data
        function updateGlobePosition(lat, lon) {
            if (!cesiumViewer || !positionEntity) return;
            
            try {
                const latNum = parseFloat(lat);
                const lonNum = parseFloat(lon);
                
                if (isNaN(latNum) || isNaN(lonNum)) return;
                
                // Update entity position
                const position = Cesium.Cartesian3.fromDegrees(lonNum, latNum);
                positionEntity.position = position;
                
                // Update position display
                document.getElementById('globe-position').textContent = 
                    `${latNum.toFixed(6)}°, ${lonNum.toFixed(6)}°`;
                
                // Fly to position if it's the first update or significant change
                if (!lastGpsUpdate || 
                    Math.abs(lastGpsUpdate.lat - latNum) > 0.1 || 
                    Math.abs(lastGpsUpdate.lon - lonNum) > 0.1) {
                    
                    cesiumViewer.camera.flyTo({
                        destination: Cesium.Cartesian3.fromDegrees(lonNum, latNum, 50000),
                        duration: 2.0
                    });
                    
                    lastGpsUpdate = { lat: latNum, lon: lonNum };
                }
                
                // Request render
                cesiumViewer.scene.requestRender();
            } catch (error) {
                console.error('Error updating globe position:', error);
            }
        }

        // Modify the existing updateSystemStatus function to call updateGlobePosition
        const originalUpdateSystemStatus = updateSystemStatus;
        updateSystemStatus = function() {
            originalUpdateSystemStatus();
            
            // Also fetch GPS data for globe update
            fetch('/info', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.gps && data.gps.lat && data.gps.lon) {
                    updateGlobePosition(data.gps.lat, data.gps.lon);
                }
            })
            .catch(error => {
                console.error('Error fetching GPS for globe:', error);
            });
        };

        // Initialize Cesium when page loads
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(initializeCesiumGlobe, 1000); // Delay to ensure Cesium is loaded
        });

        // Update Kismet data
        function updateKismetData() {
            fetch('/kismet-data', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Kismet data received:', data);  // Debug log
                    
                    // Update device counts
                    document.getElementById('devices-count').textContent = data.devices_count || '0';
                    document.getElementById('networks-count').textContent = data.networks_count || '0';
                    document.getElementById('last-update').textContent = new Date().toLocaleTimeString();
                    
                    // Update recent devices
                    const recentDevicesList = document.getElementById('devices-list');
                    recentDevicesList.innerHTML = '';
                    
                    if (data.recent_devices && data.recent_devices.length > 0) {
                        data.recent_devices.forEach(device => {
                            const deviceElement = document.createElement('div');
                            deviceElement.className = 'feed-item';
                            deviceElement.innerHTML = `
                                <strong>${device.name || 'Unknown Device'}</strong><br>
                                Type: ${device.type || 'Unknown'}<br>
                                Channel: ${device.channel || 'Unknown'}<br>
                                Signal: ${device.signal || 'Unknown'} dBm
                            `;
                            recentDevicesList.appendChild(deviceElement);
                        });
                    } else {
                        recentDevicesList.innerHTML = '<div class="feed-item">No devices detected</div>';
                    }
                    
                    // Update feed
                    const feedContainer = document.getElementById('kismet-feed');
                    feedContainer.innerHTML = ''; // Clear existing feed items
                    
                    if (data.feed_items && data.feed_items.length > 0) {
                        data.feed_items.forEach(item => {
                            const feedItem = document.createElement('div');
                            feedItem.className = 'feed-item';
                            feedItem.innerHTML = `
                                <strong>${item.type || 'Activity'}</strong>: ${item.message || 'Unknown activity'}
                            `;
                            feedContainer.appendChild(feedItem);
                            
                            // Add highlight effect for new items
                            feedItem.classList.add('feed-item-blink');
                            setTimeout(() => feedItem.classList.remove('feed-item-blink'), 2000);
                        });
                        
                        // Keep only last 10 items
                        while (feedContainer.children.length > 10) {
                            feedContainer.removeChild(feedContainer.firstChild);
                        }
                        
                        // Scroll to bottom
                        feedContainer.scrollTop = feedContainer.scrollHeight;
                    } else {
                        feedContainer.innerHTML = '<div class="feed-item">Waiting for activity...</div>';
                    }
                })
                .catch(error => {
                    // Only log error if not during stop operations (network reset causes temporary errors)
                    const isStopping = window.servicesStopping || false;
                    if (!isStopping) {
                        console.error('Error fetching Kismet data:', error);
                        document.getElementById('devices-count').textContent = '0';
                        document.getElementById('networks-count').textContent = '0';
                        document.getElementById('last-update').textContent = 'Error';
                        document.getElementById('devices-list').innerHTML = '<div class="feed-item">Failed to get data from Kismet</div>';
                        document.getElementById('kismet-feed').innerHTML = '<div class="feed-item">Failed to get data from Kismet</div>';
                    }
                });
        }

        // Start periodic updates - moved to DOMContentLoaded
        // setInterval(updateSystemStatus, 5000);
        // setInterval(updateKismetData, 2000);

        // Initial updates - moved to DOMContentLoaded
        // updateSystemStatus();
        // updateKismetData();
        
        function updateServiceStatus() {
            // Just call updateKismetStatus which checks the actual service status
            updateKismetStatus();
        }

        function showNotification(message, type = 'info') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = 'notification show ' + type;
            
            // Hide notification after 5 seconds
            setTimeout(() => {
                notification.className = 'notification';
            }, 5000);
        }

        function updateKismetStatus() {
            fetch('/script-status')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Kismet status response:', data); // Debug log
                    const kismetStatus = document.getElementById('kismet-status');
                    const wigleStatus = document.getElementById('wigle-status');
                    
                    // Get startup status from window object (set when start button clicked)
                    const isStarting = window.servicesStarting || false;
                    
                    // Update Kismet status based on state
                    if (data && data.kismet_running === true && !isStarting) {
                        // Service is fully running - GREEN
                        console.log('Setting Kismet status to running (green)');
                        kismetStatus.style.background = '#44ff44';
                        kismetStatus.style.boxShadow = '0 0 10px #44ff44';
                    } else if (isStarting) {
                        // Services are starting up - YELLOW
                        console.log('Keeping Kismet status as starting (yellow)');
                        kismetStatus.style.background = '#ffaa00';
                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';
                    } else {
                        // Services not started - RED
                        console.log('Setting Kismet status to not running (red)');
                        kismetStatus.style.background = '#ff4444';
                        kismetStatus.style.boxShadow = 'none';
                    }

                    // Update WigletoTak status based on state
                    if (data && data.wigle_running === true && !isStarting) {
                        // Service is fully running - GREEN
                        wigleStatus.style.background = '#44ff44';
                        wigleStatus.style.boxShadow = '0 0 10px #44ff44';
                    } else if (isStarting) {
                        // Services are starting up - YELLOW
                        wigleStatus.style.background = '#ffaa00';
                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';
                    } else {
                        // Services not started - RED
                        wigleStatus.style.background = '#ff4444';
                        wigleStatus.style.boxShadow = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error checking Kismet status:', error);
                    
                    // Get startup status to determine if this is expected
                    const isStarting = window.servicesStarting || false;
                    const isStopping = window.servicesStopping || false;
                    
                    // Only show error state if not during start/stop operations
                    if (!isStarting && !isStopping) {
                        // Set both indicators to error state
                        const kismetStatus = document.getElementById('kismet-status');
                        const wigleStatus = document.getElementById('wigle-status');
                        
                        kismetStatus.style.background = '#ff4444';
                        wigleStatus.style.background = '#ff4444';
                        kismetStatus.style.boxShadow = 'none';
                        wigleStatus.style.boxShadow = 'none';
                    }
                    // During stop operations, this is expected due to network reset
                });
        }

        // Update status more frequently when starting/stopping
        let statusUpdateInterval;
        let normalUpdateInterval;
        
        function startStatusUpdates() {
            // Clear any existing intervals
            if (statusUpdateInterval) {
                clearInterval(statusUpdateInterval);
            }
            if (normalUpdateInterval) {
                clearInterval(normalUpdateInterval);
            }
            
            // Wait 5 seconds before first update to avoid false positives
            setTimeout(() => {
                // Then update every 2 seconds for 70 seconds
                statusUpdateInterval = setInterval(updateKismetStatus, 2000);
                
                // Stop rapid updates after 70 seconds
                setTimeout(() => {
                    clearInterval(statusUpdateInterval);
                    // Return to normal update interval
                    normalUpdateInterval = setInterval(updateKismetStatus, 5000);
                }, 70000);
            }, 5000);
        }

        async function startKismet() {
            console.log('startKismet function called');
            showNotification('Starting Kismet services...', 'info');
            try {
                console.log('Attempting to call /api/start-script endpoint');
                const response = await fetch('/run-script', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ script_name: 'kismet' })
                });
                
                console.log('Response received:', response.status, response.statusText);
                
                if (!response.ok) {
                    console.error('Response not OK, attempting to read error data');
                    const errorData = await response.json();
                    console.error('Error data:', errorData);
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if(data.success === true) {
                    // Don't show success immediately - wait for services to actually start
                    showNotification('Kismet services are starting up, please wait...', 'info');
                    
                    // Set global flag to indicate services are starting
                    window.servicesStarting = true;
                    
                    // Set status indicators to yellow immediately to show starting
                    const kismetStatus = document.getElementById('kismet-status');
                    const wigleStatus = document.getElementById('wigle-status');
                    if (kismetStatus) {
                        kismetStatus.style.background = '#ffaa00';
                        kismetStatus.style.boxShadow = '0 0 10px #ffaa00';
                    }
                    if (wigleStatus) {
                        wigleStatus.style.background = '#ffaa00';
                        wigleStatus.style.boxShadow = '0 0 10px #ffaa00';
                    }
                    
                    startStatusUpdates(); // Start frequent status updates
                    
                    // Check service status periodically
                    let checkCount = 0;
                    const maxChecks = 65; // 65 seconds max (accounting for 60 second startup + buffer)
                    const minChecks = 46; // Don't report success before 46 seconds (actual startup time)
                    
                    const checkInterval = setInterval(async () => {
                        checkCount++;
                        
                        try {
                            const statusResponse = await fetch('/script-status');
                            const statusData = await statusResponse.json();
                            
                            // Only report success after minimum time has passed
                            if (statusData.kismet_running && statusData.wigle_running && checkCount >= minChecks) {
                                // Both services are running - wait for iframe to load
                                clearInterval(checkInterval);
                                
                                // Show almost ready message
                                showNotification('Services started, loading Kismet interface...', 'info');
                                
                                // Just show success
                                showNotification('Kismet services started successfully!', 'success');
                                window.servicesStarting = false; // Clear startup flag
                                
                                updateKismetStatus();
                            } else if (checkCount >= maxChecks) {
                                // Timeout
                                clearInterval(checkInterval);
                                showNotification('Services are taking longer than expected to start', 'warning');
                                window.servicesStarting = false; // Clear startup flag on timeout
                            } else if (checkCount % 10 === 0) {
                                // Update progress every 10 seconds
                                const elapsed = checkCount;
                                const stage = elapsed < 12 ? 'Initializing GPS and configuring GPSD...' :
                                            elapsed < 21 ? 'Starting cgps and preparing network...' :
                                            elapsed < 36 ? 'Starting Kismet server (15s initialization)...' :
                                            elapsed < 46 ? 'Launching WigleToTAK service...' :
                                            'Verifying services and loading interface...';
                                showNotification(`${stage} ${elapsed}s elapsed`, 'info');
                            }
                        } catch (error) {
                            // Keep checking
                            if (checkCount >= maxChecks) {
                                clearInterval(checkInterval);
                                showNotification('Failed to verify service status', 'error');
                            }
                        }
                    }, 1000);
                } else {
                    throw new Error(data.message || 'Failed to start Kismet');
                }
            } catch (error) {
                console.error('Error in startKismet:', error);
                console.error('Error stack:', error.stack);
                showNotification(`Failed to start Kismet services: ${error.message}`, 'error');
                window.servicesStarting = false; // Clear startup flag on error
            }
        }

        function stopKismet() {
            showNotification('Stopping Kismet services...', 'info');
            window.servicesStopping = true; // Set flag to suppress network errors
            
            fetch('/stop-script', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if(data.status === 'success') {
                        showNotification('Kismet services stopped successfully!', 'success');
                        
                        // Clear flags
                        window.servicesStarting = false;
                        window.servicesStopping = false;
                        
                        // Set indicators to red immediately
                        const kismetStatus = document.getElementById('kismet-status');
                        const wigleStatus = document.getElementById('wigle-status');
                        if (kismetStatus) {
                            kismetStatus.style.background = '#ff4444';
                            kismetStatus.style.boxShadow = 'none';
                        }
                        if (wigleStatus) {
                            wigleStatus.style.background = '#ff4444';
                            wigleStatus.style.boxShadow = 'none';
                        }
                        
                        // Start frequent status updates to show services stopping
                        startStatusUpdates();
                    } else {
                        showNotification('Error stopping Kismet services: ' + (data.message || 'Unknown error'), 'error');
                        window.servicesStopping = false; // Clear flag on error
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Failed to stop Kismet services. Please try again.', 'error');
                    window.servicesStopping = false; // Clear flag on error
                });
        }

        function toggleMinimize(button) {
            const gridItem = button.closest('.grid-item');
            const isMinimized = gridItem.classList.toggle('minimized');
            
            if (isMinimized) {
                // Add to minimized tabs
                const tab = document.createElement('div');
                tab.className = 'minimized-tab';
                tab.innerHTML = `
                    ${gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', '')}
                    <button class="restore-button" onclick="restoreBox('${gridItem.id}')">▲</button>
                `;
                document.getElementById('minimized-tabs').appendChild(tab);

                // Enable resizing for other boxes
                const otherBoxes = document.querySelectorAll('.grid-item:not(.minimized)');
                otherBoxes.forEach(box => {
                    box.style.minWidth = '200px';
                    box.style.minHeight = '150px';
                });
            } else {
                // Remove from minimized tabs
                const tabs = document.querySelectorAll('.minimized-tab');
                tabs.forEach(tab => {
                    if (tab.textContent.includes(gridItem.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {
                        tab.remove();
                    }
                });

                // Disable resizing if no boxes are minimized
                const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');
                if (minimizedBoxes.length === 0) {
                    const allBoxes = document.querySelectorAll('.grid-item');
                    allBoxes.forEach(box => {
                        box.style.minWidth = '';
                        box.style.minHeight = '';
                        // Reset to original position and size
                        resetBoxPosition(box);
                    });
                }
            }
        }

        function resetBoxPosition(box) {
            switch(box.id) {
                case 'instructions':
                    box.style.top = '8px';
                    box.style.left = '8px';
                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;
                    // Reset to auto height to fit content
                    box.style.height = 'auto';
                    setTimeout(() => {
                        const contentHeight = box.offsetHeight;
                        box.style.height = contentHeight + 'px';
                    }, 100);
                    break;
                case 'wifi-data-feed':
                    box.style.top = '8px';
                    box.style.left = `calc(4 * (100vw / 12) + 8px)`;
                    box.style.width = `calc(4 * (100vw / 12) - 16px)`;
                    box.style.height = `calc(100vh - 140px - 8px)`;
                    break;
                case 'start-menu':
                case 'system-status':
                    // Reposition these boxes under instructions
                    const instructionsBox = document.getElementById('instructions');
                    if (instructionsBox) {
                        setTimeout(() => {
                            const instructionsHeight = instructionsBox.offsetHeight;
                            const instructionsBottom = instructionsBox.offsetTop + instructionsHeight;
                            const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;
                            const startMenuHeight = (remainingHeight * 0.5) - 8;
                            const systemStatusHeight = (remainingHeight * 0.5) - 8;
                            
                            box.style.left = '8px';
                            box.style.width = `calc(4 * (100vw / 12) - 16px)`;
                            
                            if (box.id === 'start-menu') {
                                box.style.top = (instructionsBottom + 8) + 'px';
                                box.style.height = startMenuHeight + 'px';
                            } else if (box.id === 'system-status') {
                                box.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';
                                box.style.height = systemStatusHeight + 'px';
                                // Refresh resize handles for system status box
                                refreshResizeHandles(box);
                            }
                        }, 100);
                    }
                    break;
            }
        }

        function restoreBox(boxId) {
            const box = document.getElementById(boxId);
            box.classList.remove('minimized');
            
            // Remove from minimized tabs
            const tabs = document.querySelectorAll('.minimized-tab');
            tabs.forEach(tab => {
                if (tab.textContent.includes(box.querySelector('h2').textContent.replace('▼', '').replace('▲', ''))) {
                    tab.remove();
                }
            });

            // Disable resizing if no boxes are minimized
            const minimizedBoxes = document.querySelectorAll('.grid-item.minimized');
            if (minimizedBoxes.length === 0) {
                const allBoxes = document.querySelectorAll('.grid-item');
                allBoxes.forEach(box => {
                    box.style.minWidth = '';
                    box.style.minHeight = '';
                    // Reset to original position and size
                    resetBoxPosition(box);
                });
            }
        }

        // Initialize draggable functionality
        function initializeGrid() {
            const gridItems = document.querySelectorAll('.grid-item');
            gridItems.forEach(item => {
                // Allow all boxes including Kismet iframe to be draggable
                
                const header = item.querySelector('.box-header');
                if (header) {
                    // Remove the click handler that was blocking minimize buttons
                    // The document-level click handler will handle control buttons
                }

                // Make box draggable - DISABLED ON MOBILE
                if (header && window.innerWidth > 768) {
                    header.addEventListener('mousedown', function(e) {
                        if (e.target.classList.contains('control-button-small')) return;
                        
                        const box = this.closest('.grid-item');
                        const startX = e.clientX;
                        const startY = e.clientY;
                        const startLeft = box.offsetLeft;
                        const startTop = box.offsetTop;
                        
                        // Set position absolute for dragging and preserve dimensions
                        if (box.style.position !== 'absolute') {
                            // Store current dimensions before changing position
                            const currentWidth = box.offsetWidth;
                            const currentHeight = box.offsetHeight;
                            
                            box.style.position = 'absolute';
                            box.style.left = startLeft + 'px';
                            box.style.top = startTop + 'px';
                            
                            // Preserve the original dimensions
                            box.style.width = currentWidth + 'px';
                            box.style.height = currentHeight + 'px';
                        }
                        
                        function onMouseMove(e) {
                            const newLeft = startLeft + (e.clientX - startX);
                            const newTop = startTop + (e.clientY - startY);
                            
                            box.style.left = `${newLeft}px`;
                            box.style.top = `${newTop}px`;
                        }
                        
                        function onMouseUp() {
                            document.removeEventListener('mousemove', onMouseMove);
                            document.removeEventListener('mouseup', onMouseUp);
                        }
                        
                        document.addEventListener('mousemove', onMouseMove);
                        document.addEventListener('mouseup', onMouseUp);
                    });
                }
            });
        }

        function createResizeHandles(box) {
            // Skip resize handles on mobile
            if (window.innerWidth <= 768) return;
            
            const positions = ['top', 'bottom', 'left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right'];
            positions.forEach(pos => {
                const handle = document.createElement('div');
                handle.className = `resize-handle ${pos}`;
                handle.style.zIndex = '1000';  // Ensure handles are on top
                handle.onmousedown = function(e) { 
                    e.stopPropagation();
                    e.preventDefault();
                    console.log('Resize handle clicked:', pos, 'on box:', box.id);
                    initResize(e, this); 
                };
                box.appendChild(handle);
            });
        }
        
        function refreshResizeHandles(box) {
            // Remove existing handles
            const existingHandles = box.querySelectorAll('.resize-handle');
            existingHandles.forEach(handle => handle.remove());
            
            // Recreate handles
            createResizeHandles(box);
        }

        function initResize(e, handle) {
            e.preventDefault();
            const box = handle.closest('.grid-item');
            console.log('Starting resize for box:', box.id);
            
            // Ensure box has absolute positioning for resize
            if (box.style.position !== 'absolute') {
                box.style.position = 'absolute';
                box.style.left = box.offsetLeft + 'px';
                box.style.top = box.offsetTop + 'px';
            }
            
            const startX = e.clientX;
            const startY = e.clientY;
            const startWidth = box.offsetWidth;
            const startHeight = box.offsetHeight;
            const startLeft = box.offsetLeft;
            const startTop = box.offsetTop;

            function doResize(e) {
                const pos = handle.className.split(' ')[1];
                let newWidth = startWidth;
                let newHeight = startHeight;
                let newLeft = startLeft;
                let newTop = startTop;

                if (pos.includes('right')) {
                    newWidth = startWidth + (e.clientX - startX);
                }
                if (pos.includes('left')) {
                    newWidth = startWidth - (e.clientX - startX);
                    newLeft = startLeft + (e.clientX - startX);
                }
                if (pos.includes('bottom')) {
                    newHeight = startHeight + (e.clientY - startY);
                }
                if (pos.includes('top')) {
                    newHeight = startHeight - (e.clientY - startY);
                    newTop = startTop + (e.clientY - startY);
                }

                // Apply minimum size constraints
                newWidth = Math.max(200, newWidth);
                newHeight = Math.max(150, newHeight);

                box.style.width = `${newWidth}px`;
                
                box.style.height = `${newHeight}px`;
                
                box.style.left = `${newLeft}px`;
                box.style.top = `${newTop}px`;
            }

            function stopResize() {
                document.removeEventListener('mousemove', doResize);
                document.removeEventListener('mouseup', stopResize);
            }

            document.addEventListener('mousemove', doResize);
            document.addEventListener('mouseup', stopResize);
        }

        // Add resize handles to all boxes when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            const boxes = document.querySelectorAll('.grid-item');
            boxes.forEach(box => {
                // Add resize handles to all boxes including Kismet iframe
                createResizeHandles(box);
            });
            initializeGrid();
            
            // Initialize Cesium Globe with a slight delay to ensure library is loaded
            setTimeout(() => {
                initializeCesiumGlobe();
            }, 1000);
            
            // Auto-size the instructions box to fit content on page load
            const instructionsBox = document.getElementById('instructions');
            const startMenuBox = document.getElementById('start-menu');
            const systemStatusBox = document.getElementById('system-status');
            
            if (instructionsBox && window.innerWidth > 768) {
                // Let the browser calculate the natural height
                instructionsBox.style.height = 'auto';
                
                // Get the actual height after content is rendered
                setTimeout(() => {
                    const contentHeight = instructionsBox.offsetHeight;
                    // Set the height explicitly to avoid layout issues
                    instructionsBox.style.height = contentHeight + 'px';
                    
                    // Position start-menu and system-status boxes under instructions
                    if (startMenuBox && systemStatusBox) {
                        const instructionsBottom = instructionsBox.offsetTop + contentHeight;
                        const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16; // 100px header + 30px footer, 16px for margins
                        // Give equal space to both boxes
                        const startMenuHeight = (remainingHeight * 0.5) - 8;
                        const systemStatusHeight = (remainingHeight * 0.5) - 8;
                        
                        // Position start menu
                        startMenuBox.style.top = (instructionsBottom + 8) + 'px';
                        startMenuBox.style.height = startMenuHeight + 'px';
                        
                        // Position system status
                        systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';
                        systemStatusBox.style.height = systemStatusHeight + 'px';
                        
                        // Refresh resize handles after positioning
                        refreshResizeHandles(systemStatusBox);
                    }
                }, 100);
            }
            
            // Start periodic updates after DOM is loaded
            setInterval(updateSystemStatus, 5000);
            setInterval(updateKismetData, 2000);

            // Initial updates after DOM is loaded
            updateSystemStatus();
            updateKismetData();
            
            // Add event listeners for control buttons
            document.addEventListener('click', function(e) {
                const action = e.target.getAttribute('data-action');
                if (!action) return;
                
                console.log('Button clicked with action:', action);
                
                switch(action) {
                    case 'minimize':
                        toggleMinimize(e.target);
                        break;
                    case 'startKismet':
                        console.log('startKismet action detected, calling function');
                        startKismet();
                        break;
                    case 'stopKismet':
                        stopKismet();
                        break;
                }
            });
        });

        // Start periodic updates
        setInterval(updateKismetStatus, 5000);

        // Initial status update
        updateKismetStatus();
        
        // Handle window resize to maintain proper positioning
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                const instructionsBox = document.getElementById('instructions');
                const startMenuBox = document.getElementById('start-menu');
                const systemStatusBox = document.getElementById('system-status');
                
                if (instructionsBox && startMenuBox && systemStatusBox) {
                    const contentHeight = instructionsBox.offsetHeight;
                    const instructionsBottom = instructionsBox.offsetTop + contentHeight;
                    const remainingHeight = window.innerHeight - instructionsBottom - 130 - 16;
                    const startMenuHeight = (remainingHeight * 0.5) - 8;
                    const systemStatusHeight = (remainingHeight * 0.5) - 8;
                    
                    startMenuBox.style.top = (instructionsBottom + 8) + 'px';
                    startMenuBox.style.height = startMenuHeight + 'px';
                    
                    systemStatusBox.style.top = (instructionsBottom + startMenuHeight + 16) + 'px';
                    systemStatusBox.style.height = systemStatusHeight + 'px';
                    
                    // Refresh resize handles after window resize
                    refreshResizeHandles(systemStatusBox);
                }
            }
        });

    </script>
    
    <!-- Theme Toggle Button -->
    <button id="theme-toggle" 
            aria-label="Toggle dark mode" 
            aria-pressed="false"
            style="position: fixed; bottom: 80px; right: 20px; width: 48px; height: 48px; border-radius: 50%; background: var(--bg-secondary); border: 1px solid var(--border-primary); color: var(--text-primary); cursor: pointer; display: flex; align-items: center; justify-content: center; transition: all 0.3s ease; z-index: 1000; box-shadow: var(--shadow-lg);">
        <!-- Sun icon (for dark mode) -->
        <svg id="sun-icon" style="width: 24px; height: 24px; display: block;" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
        </svg>
        <!-- Moon icon (for light mode) -->
        <svg id="moon-icon" style="width: 24px; height: 24px; display: none;" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
        </svg>
    </button>
    
    <!-- Theme Switcher -->
    <script src="/js/theme.js"></script>
    
    <script>
    // Theme toggle functionality
    (function() {
        const themeToggle = document.getElementById('theme-toggle');
        const sunIcon = document.getElementById('sun-icon');
        const moonIcon = document.getElementById('moon-icon');
        const html = document.documentElement;
        
        // Check for saved theme preference or default to blue theme
        const currentTheme = localStorage.getItem('theme') || 'blue';
        
        // Apply saved theme on load
        if (currentTheme === 'dark') {
            html.setAttribute('data-theme', 'dark');
            themeToggle.setAttribute('aria-pressed', 'true');
            sunIcon.style.display = 'none';
            moonIcon.style.display = 'block';
        }
        
        // Toggle theme
        themeToggle.addEventListener('click', function() {
            const isDark = html.getAttribute('data-theme') === 'dark';
            
            if (isDark) {
                // Switch to blue mode (default)
                html.removeAttribute('data-theme');
                localStorage.setItem('theme', 'blue');
                themeToggle.setAttribute('aria-pressed', 'false');
                sunIcon.style.display = 'block';
                moonIcon.style.display = 'none';
            } else {
                // Switch to dark mode
                html.setAttribute('data-theme', 'dark');
                localStorage.setItem('theme', 'dark');
                themeToggle.setAttribute('aria-pressed', 'true');
                sunIcon.style.display = 'none';
                moonIcon.style.display = 'block';
            }
        });
        
        // Hover effects
        themeToggle.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1)';
            this.style.boxShadow = 'var(--shadow-lg), var(--glow-primary)';
        });
        
        themeToggle.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
            this.style.boxShadow = 'var(--shadow-lg)';
        });
    })();
    </script>
</body>
</html>